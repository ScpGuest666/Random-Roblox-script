-- Utility function to create buttons with rounded corners
local function createButton(parent, position, size, bgColor, text, scaled)
	local button = Instance.new("TextButton")
	button.Parent = parent
	button.Size = size
	button.Position = position
	button.BackgroundColor3 = bgColor
	button.Text = text
	button.TextScaled = scaled
	button.BorderSizePixel = 0

	-- Rounded corners for a modern look
	local uicorner = Instance.new("UICorner")
	uicorner.CornerRadius = UDim.new(0, 5)
	uicorner.Parent = button

	return button
end

-- Create ScreenGui with optional rounded background for the frame
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

local frame = Instance.new("Frame")
frame.Parent = screenGui
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.Size = UDim2.new(0, 220, 0, 350) -- Increased height for extra buttons
frame.Position = UDim2.new(0.5, -110, 0.5, -175) -- Adjusted position
frame.Active = true
frame.Draggable = true

local uicorner = Instance.new("UICorner")
uicorner.CornerRadius = UDim.new(0, 10)
uicorner.Parent = frame

-- TextBox for player input
local playerInput = Instance.new("TextBox")
playerInput.Parent = frame
playerInput.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
playerInput.Size = UDim2.new(0, 180, 0, 30)
playerInput.Position = UDim2.new(0, 20, 0, 20)
playerInput.PlaceholderText = "Enter Player Name"
playerInput.TextScaled = true
playerInput.TextColor3 = Color3.fromRGB(0, 0, 0)

-- Create Buttons: On, Off, Destroy, Increase/Decrease Distance, Left, Right
local onButton = createButton(frame, UDim2.new(0, 20, 0, 60), UDim2.new(0, 80, 0, 30), Color3.fromRGB(0, 255, 0), "On", true)
local offButton = createButton(frame, UDim2.new(0, 120, 0, 60), UDim2.new(0, 80, 0, 30), Color3.fromRGB(255, 0, 0), "Off", true)
local pathfindButton = createButton(frame, UDim2.new(0, 20, 0, 100), UDim2.new(0, 180, 0, 30), Color3.fromRGB(255, 255, 0), "Pathfind: On", true)
local destroyButton = createButton(frame, UDim2.new(0, 20, 0, 140), UDim2.new(0, 180, 0, 30), Color3.fromRGB(255, 255, 255), "Destroy", true)
local plusButton = createButton(frame, UDim2.new(0, 20, 0, 180), UDim2.new(0, 40, 0, 30), Color3.fromRGB(0, 255, 255), "+", true)
local minusButton = createButton(frame, UDim2.new(0, 160, 0, 180), UDim2.new(0, 40, 0, 30), Color3.fromRGB(255, 165, 0), "-", true)
local leftButton = createButton(frame, UDim2.new(0, 20, 0, 220), UDim2.new(0, 80, 0, 30), Color3.fromRGB(255, 255, 0), "Left", true)
local rightButton = createButton(frame, UDim2.new(0, 120, 0, 220), UDim2.new(0, 80, 0, 30), Color3.fromRGB(255, 0, 0), "Right", true)

-- Status Label
local statusLabel = Instance.new("TextLabel")
statusLabel.Parent = frame
statusLabel.Size = UDim2.new(0, 220, 0, 30)
statusLabel.Position = UDim2.new(0, 0, 0, -30)
statusLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
statusLabel.Text = "Status: Off"
statusLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
statusLabel.TextScaled = true
statusLabel.Font = Enum.Font.SourceSansBold

-- Variables for managing distances
local followDistance = 3
local dodgeDistance = 3
local lookAtEnabled = false
local pathfindingEnabled = false -- Initially pathfinding is off
local isShaking = false
local lastPosition = nil
local movementCheckInterval = 0.5 -- Time in seconds to check for movement
local notMovingCounter = 0 -- Counter to check if the character hasn't moved in several checks

-- Variables for platform control
local leftPlatformEnabled = false
local rightPlatformEnabled = false
local leftPlatform, rightPlatform -- These will be the colored platforms
local leftPivot, rightPivot -- These will be the invisible pivot parts
local leftBall, rightBall -- The red balls in front of the platforms
local targetPlayer = nil

-- Function to find a player by partial name
local function findPlayerByName(partialName)
	partialName = string.lower(partialName)
	for _, player in pairs(game.Players:GetPlayers()) do
		if string.find(string.lower(player.Name), partialName) or string.find(string.lower(player.DisplayName), partialName) then
			return player
		end
	end
	return nil
end

-- Pathfinding service
local PathfindingService = game:GetService("PathfindingService")

-- Function to calculate path
local function calculatePath(start, goal)
	local path = PathfindingService:CreatePath()
	path:ComputeAsync(start, goal)
	return path
end

-- Function to create/update the platforms and balls
local function updatePlatforms()
    if not targetPlayer or not targetPlayer.Character then
        -- If the target is lost, destroy platforms, pivots, and balls
        if leftPivot then
            leftPivot:Destroy()
            leftPivot = nil
            leftPlatform = nil
        end
        if rightPivot then
            rightPivot:Destroy()
            rightPivot = nil
            rightPlatform = nil
        end
        if leftBall then
            leftBall:Destroy()
            leftBall = nil
        end
        if rightBall then
            rightBall:Destroy()
            rightBall = nil
        end
        return
    end

    local rootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    if leftPlatformEnabled then
        if not leftPivot then
            -- Create the invisible pivot
            leftPivot = Instance.new("Part")
            leftPivot.Parent = workspace
            leftPivot.Size = Vector3.new(1, 0.2, 1)
            leftPivot.Transparency = 1
            leftPivot.Anchored = true
            leftPivot.CanCollide = false

            -- Create the colored platform and parent it to the pivot
            leftPlatform = Instance.new("Part")
            leftPlatform.Parent = leftPivot
            leftPlatform.Size = Vector3.new(2, 0.2, 2)
            leftPlatform.BrickColor = BrickColor.new("New Yeller")
            leftPlatform.Anchored = true
            leftPlatform.CanCollide = false
            leftPlatform.CFrame = CFrame.new(0, 0, 0)

            -- Create the red ball and parent it to the pivot
            leftBall = Instance.new("Part")
            leftBall.Parent = leftPivot
            leftBall.Shape = Enum.PartType.Ball
            leftBall.Size = Vector3.new(1, 1, 1)
            leftBall.BrickColor = BrickColor.new("Really red")
            leftBall.Anchored = true
            leftBall.CanCollide = false
            leftBall.CFrame = CFrame.new(1, 0, -4) -- Position in front and to the right
        end

        -- Position the pivot part using PivotTo() without rotating
        local newCFrame = rootPart.CFrame * CFrame.new(-4, -3, 0)
        leftPivot:PivotTo(newCFrame)
    else
        if leftPivot then
            leftPivot:Destroy()
            leftPivot = nil
            leftPlatform = nil
        end
        if leftBall then
            leftBall:Destroy()
            leftBall = nil
        end
    end

    if rightPlatformEnabled then
        if not rightPivot then
            -- Create the invisible pivot
            rightPivot = Instance.new("Part")
            rightPivot.Parent = workspace
            rightPivot.Size = Vector3.new(1, 0.2, 1)
            rightPivot.Transparency = 1
            rightPivot.Anchored = true
            rightPivot.CanCollide = false

            -- Create the colored platform and parent it to the pivot
            rightPlatform = Instance.new("Part")
            rightPlatform.Parent = rightPivot
            rightPlatform.Size = Vector3.new(2, 0.2, 2)
            rightPlatform.BrickColor = BrickColor.new("Really red")
            rightPlatform.Anchored = true
            rightPlatform.CanCollide = false
            rightPlatform.CFrame = CFrame.new(0, 0, 0)

            -- Create the red ball and parent it to the pivot
            rightBall = Instance.new("Part")
            rightBall.Parent = rightPivot
            rightBall.Shape = Enum.PartType.Ball
            rightBall.Size = Vector3.new(1, 1, 1)
            rightBall.BrickColor = BrickColor.new("Really red")
            rightBall.Anchored = true
            rightBall.CanCollide = false
            rightBall.CFrame = CFrame.new(-1, 0, -4) -- Position in front and to the left
        end

        -- Position the pivot part using PivotTo() without rotating
        local newCFrame = rootPart.CFrame * CFrame.new(4, -3, 0)
        rightPivot:PivotTo(newCFrame)
    else
        if rightPivot then
            rightPivot:Destroy()
            rightPivot = nil
            rightPlatform = nil
        end
        if rightBall then
            rightBall:Destroy()
            rightBall = nil
        end
    end
end

-- Enhanced movement function with pathfinding and movement check
local function moveToPlatform(platform)
    local localPlayer = game.Players.LocalPlayer
    local localRootPart = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")

    if localRootPart and platform then
        local platformPosition = platform.Position
        local distance = (localRootPart.Position - platformPosition).Magnitude

        -- Disable pathfinding and raycasting if close to the platform
        if distance <= 5 then
            pathfindingEnabled = false
            pathfindButton.Text = "Pathfind: Off"
            pathfindButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)

            -- Use MoveTo for close-range movement
            localPlayer.Character.Humanoid:MoveTo(platformPosition)
            return -- Exit early after using MoveTo
        end

        -- Check for movement if pathfinding is enabled
        if pathfindingEnabled then
            if lastPosition then
                local movedDistance = (localRootPart.Position - lastPosition).Magnitude
                if movedDistance < 0.5 then
                    notMovingCounter = notMovingCounter + 1
                    if notMovingCounter >= 3 then -- If not moved for 3 checks (1.5 seconds)
                        -- Not moving, try raycasting again
                        pathfindingEnabled = false
                        pathfindButton.Text = "Pathfind: Off"
                        pathfindButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                        notMovingCounter = 0 -- Reset counter
                    end
                else
                    notMovingCounter = 0 -- Reset counter if moved
                end
            else
                notMovingCounter = 0 -- Reset counter if no last position
            end
            lastPosition = localRootPart.Position
        end

        if math.abs(distance - followDistance) > 1 then
            local direction = (platformPosition - localRootPart.Position).unit
            local destination = platformPosition - (direction * followDistance)

            local raycastParams = RaycastParams.new()
            raycastParams.FilterDescendantsInstances = {localPlayer.Character}
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

            local rayResult = workspace:Raycast(localRootPart.Position, direction * followDistance, raycastParams)
            if rayResult and not pathfindingEnabled then
                -- Obstacle detected, check for shaking
                local lastPosition = localRootPart.Position
                task.wait(0.1) -- Wait for a short duration to check for movement
                local currentPosition = localRootPart.Position
                local movedDistance = (currentPosition - lastPosition).Magnitude

                if movedDistance < 0.5 then -- Threshold for detecting shaking
                    isShaking = true
                else
                    isShaking = false
                end

                if isShaking then
                    pathfindingEnabled = true -- Enable pathfinding if shaking
                    pathfindButton.Text = "Pathfind: On"
                    pathfindButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
                end

                if not pathfindingEnabled then
                    local dodgeOptions = {
                        Vector3.new(-direction.Z, 0, direction.X).unit,   -- Perpendicular left
                        Vector3.new(direction.Z, 0, -direction.X).unit,   -- Perpendicular right
                        direction * 0.5,                                  -- Halfway forward
                        -direction                                        -- Opposite (back)
                    }

                    for _, dodgeDirection in ipairs(dodgeOptions) do
                        local dodgePosition = localRootPart.Position + (dodgeDirection * dodgeDistance)
                        local dodgeRayResult = workspace:Raycast(localRootPart.Position, dodgeDirection * dodgeDistance, raycastParams)

                        if not dodgeRayResult then
                            destination = dodgePosition
                            break
                        end
                    end
                end
            end

            if pathfindingEnabled then
                local path = calculatePath(localRootPart.Position, platformPosition)
                if path.Status == Enum.PathStatus.Success then
                    local waypoints = path:GetWaypoints()
                    for i, waypoint in ipairs(waypoints) do
                        if i > 1 then -- Skip the first waypoint which is the starting position
                            localPlayer.Character.Humanoid:MoveTo(waypoint.Position)
                            if waypoint.Action == Enum.PathWaypointAction.Jump then
                                localPlayer.Character.Humanoid.Jump = true
                            end
                            localPlayer.Character.Humanoid.MoveToFinished:Wait()
                            break -- Move to one waypoint at a time
                        end
                    end
                else
                    -- Handle path calculation failure
                    print("Path calculation failed")
                    pathfindingEnabled = false -- Disable pathfinding if it fails
                    pathfindButton.Text = "Pathfind: Off"
                    pathfindButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                end
            else
                localPlayer.Character.Humanoid:MoveTo(destination)
            end

        elseif distance < dodgeDistance then
            local retreatDirection = (localRootPart.Position - platformPosition).unit
            local retreatPosition = localRootPart.Position + (retreatDirection * dodgeDistance * 0.5)
            localPlayer.Character.Humanoid:MoveTo(retreatPosition)
        end
    end
end

-- Enhanced movement function to follow the target player
local function moveToPlayer(targetPlayer)
    local localPlayer = game.Players.LocalPlayer
    local localRootPart = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
    local targetRootPart = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")

    if localRootPart and targetRootPart then
        local distance = (localRootPart.Position - targetRootPart.Position).Magnitude

        -- Turn off pathfinding if too close to the target
        if distance <= 3 then
            pathfindingEnabled = false
            pathfindButton.Text = "Pathfind: Off"
            pathfindButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        end

        -- Check for movement if pathfinding is enabled
        if pathfindingEnabled then
            if lastPosition then
                local movedDistance = (localRootPart.Position - lastPosition).Magnitude
                if movedDistance < 0.5 then
                    notMovingCounter = notMovingCounter + 1
                    if notMovingCounter >= 3 then -- If not moved for 3 checks (1.5 seconds)
                        -- Not moving, try raycasting again
                        pathfindingEnabled = false
                        pathfindButton.Text = "Pathfind: Off"
                        pathfindButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                        notMovingCounter = 0 -- Reset counter
                    end
                else
                    notMovingCounter = 0 -- Reset counter if moved
                end
            else
                notMovingCounter = 0 -- Reset counter if no last position
            end
            lastPosition = localRootPart.Position
        end

        if math.abs(distance - followDistance) > 1 then
            local direction = (targetRootPart.Position - localRootPart.Position).unit
            local destination = targetRootPart.Position - (direction * followDistance)

            local raycastParams = RaycastParams.new()
            raycastParams.FilterDescendantsInstances = {localPlayer.Character}
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

            local rayResult = workspace:Raycast(localRootPart.Position, direction * followDistance, raycastParams)
            if rayResult and not pathfindingEnabled then
                -- Obstacle detected, check for shaking
                local lastPosition = localRootPart.Position
                task.wait(0.1) -- Wait for a short duration to check for movement
                local currentPosition = localRootPart.Position
                local movedDistance = (currentPosition - lastPosition).Magnitude

                if movedDistance < 0.5 then -- Threshold for detecting shaking
                    isShaking = true
                else
                    isShaking = false
                end

                if isShaking then
                    pathfindingEnabled = true -- Enable pathfinding if shaking
                    pathfindButton.Text = "Pathfind: On"
                    pathfindButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
                end

                if not pathfindingEnabled then
                    local dodgeOptions = {
                        Vector3.new(-direction.Z, 0, direction.X).unit,   -- Perpendicular left
                        Vector3.new(direction.Z, 0, -direction.X).unit,   -- Perpendicular right
                        direction * 0.5,                                  -- Halfway forward
                        -direction                                        -- Opposite (back)
                    }

                    for _, dodgeDirection in ipairs(dodgeOptions) do
                        local dodgePosition = localRootPart.Position + (dodgeDirection * dodgeDistance)
                        local dodgeRayResult = workspace:Raycast(localRootPart.Position, dodgeDirection * dodgeDistance, raycastParams)

                        if not dodgeRayResult then
                            destination = dodgePosition
                            break
                        end
                    end
                end
            end

            if pathfindingEnabled then
                local path = calculatePath(localRootPart.Position, targetRootPart.Position)
                if path.Status == Enum.PathStatus.Success then
                    local waypoints = path:GetWaypoints()
                    for i, waypoint in ipairs(waypoints) do
                        if i > 1 then -- Skip the first waypoint which is the starting position
                            localPlayer.Character.Humanoid:MoveTo(waypoint.Position)
                            if waypoint.Action == Enum.PathWaypointAction.Jump then
                                localPlayer.Character.Humanoid.Jump = true
                            end
                            localPlayer.Character.Humanoid.MoveToFinished:Wait()
                            break -- Move to one waypoint at a time
                        end
                    end
                else
                    -- Handle path calculation failure
                    print("Path calculation failed")
                    pathfindingEnabled = false -- Disable pathfinding if it fails
                    pathfindButton.Text = "Pathfind: Off"
                    pathfindButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                end
            else
                localPlayer.Character.Humanoid:MoveTo(destination)
            end

        elseif distance < dodgeDistance then
            local retreatDirection = (localRootPart.Position - targetRootPart.Position).unit
            local retreatPosition = localRootPart.Position + (retreatDirection * dodgeDistance * 0.5)
            localPlayer.Character.Humanoid:MoveTo(retreatPosition)
        end
    end
end

-- Loop for following/dodging
local followLoop
local function startFollowing()
    if followLoop then return end
    followLoop = game:GetService("RunService").Heartbeat:Connect(function(deltaTime)
        if lookAtEnabled then
            targetPlayer = findPlayerByName(playerInput.Text)
            if targetPlayer then
                -- Follow the active platform if it exists, otherwise follow the player
                if leftPlatformEnabled and leftPlatform then
                    moveToPlatform(leftPlatform)
                elseif rightPlatformEnabled and rightPlatform then
                    moveToPlatform(rightPlatform)
                else
                    moveToPlayer(targetPlayer)
                end
            end
        end
    end)
end

local function stopFollowing()
    if followLoop then
        followLoop:Disconnect()
        followLoop = nil
    end
end

-- Update status label
local function updateStatusLabel()
	statusLabel.Text = "Status: On (Follow: " .. tostring(followDistance) .. " studs, Dodge: " .. tostring(dodgeDistance) .. " studs)"
end

-- New event connection for player input
playerInput.Changed:Connect(function()
    targetPlayer = findPlayerByName(playerInput.Text)
    if targetPlayer then
        -- Immediately update platforms when a valid target is entered
        updatePlatforms()
    else
        -- Clear platforms if target is no longer valid
        if leftPivot then
            leftPivot:Destroy()
            leftPivot = nil
            leftPlatform = nil
        end
        if rightPivot then
            rightPivot:Destroy()
            rightPivot = nil
            rightPlatform = nil
        end
        if leftBall then
            leftBall:Destroy()
            leftBall = nil
        end
        if rightBall then
            rightBall:Destroy()
            rightBall = nil
        end
    end
end)

-- Button Event Listeners
plusButton.MouseButton1Click:Connect(function()
	followDistance = math.min(30, followDistance + 1)
	dodgeDistance = math.min(30, dodgeDistance + 1)
	updateStatusLabel()
end)

minusButton.MouseButton1Click:Connect(function()
	followDistance = math.max(1, followDistance - 1)
	dodgeDistance = math.max(1, dodgeDistance - 1)
	updateStatusLabel()
end)

onButton.MouseButton1Click:Connect(function()
    lookAtEnabled = true
    updateStatusLabel()
    statusLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
    startFollowing()
end)

offButton.MouseButton1Click:Connect(function()
    lookAtEnabled = false
    pathfindingEnabled = false
    pathfindButton.Text = "Pathfind: Off"
    pathfindButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    statusLabel.Text = "Status: Off"
    statusLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
    stopFollowing()
end)

pathfindButton.MouseButton1Click:Connect(function()
	pathfindingEnabled = not pathfindingEnabled
	if pathfindingEnabled then
		pathfindButton.Text = "Pathfind: On"
		pathfindButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
	else
		pathfindButton.Text = "Pathfind: Off"
		pathfindButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
	end
end)

leftButton.MouseButton1Click:Connect(function()
    if targetPlayer then
        leftPlatformEnabled = not leftPlatformEnabled
        if leftPlatformEnabled then
            leftButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Green when on
            rightPlatformEnabled = false
            rightButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red when off
        else
            leftButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0) -- Yellow when off
        end
        updatePlatforms() -- Update immediately when button state changes
    end
end)

rightButton.MouseButton1Click:Connect(function()
    if targetPlayer then
        rightPlatformEnabled = not rightPlatformEnabled
        if rightPlatformEnabled then
            rightButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Green when on
            leftPlatformEnabled = false
            leftButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0) -- Yellow when off
        else
            rightButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red when off
        end
        updatePlatforms() -- Update immediately when button state changes
    end
end)

-- Connect to RunService to continuously update platforms
game:GetService("RunService").Heartbeat:Connect(updatePlatforms)

destroyButton.MouseButton1Click:Connect(function()
    -- Stop following and pathfinding
    lookAtEnabled = false
    pathfindingEnabled = false
    stopFollowing()

    -- Reset pathfind button
    pathfindButton.Text = "Pathfind: Off"
    pathfindButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)

    -- Reset status label
    statusLabel.Text = "Status: Off"
    statusLabel.TextColor3 = Color3.fromRGB(255, 0, 0)

    -- Clear target player
    targetPlayer = nil
    playerInput.Text = ""

    -- Disable and reset platform buttons
    leftPlatformEnabled = false
    leftButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
    rightPlatformEnabled = false
    rightButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)

    -- Destroy platforms, pivots, and balls if they exist
    if leftPivot then
        leftPivot:Destroy()
        leftPivot = nil
        leftPlatform = nil
    end
    if rightPivot then
        rightPivot:Destroy()
        rightPivot = nil
        rightPlatform = nil
    end
    if leftBall then
        leftBall:Destroy()
        leftBall = nil
    end
    if rightBall then
        rightBall:Destroy()
        rightBall = nil
    end

    -- Destroy the GUI
    screenGui:Destroy()
end)
