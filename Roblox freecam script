-- Create Main ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

-- Create Main Frame
local frame = Instance.new("Frame")
frame.Parent = screenGui
frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
frame.Size = UDim2.new(0, 200, 0, 150)
frame.Position = UDim2.new(0.5, -100, 0.5, -75)
frame.Active = true
frame.Draggable = true

-- Platform Variables - Separated tracking
local movablePlatform = nil
local lockedPlatform = nil
local isMovableActive = false
local isLockedActive = false

-- Platform Variables
local player = game.Players.LocalPlayer
local camera = workspace.CurrentCamera
local forwardGui = nil
local tweenService = game:GetService("TweenService")
local currentTween = nil
local movementSpeed = 10
local runService = game:GetService("RunService")
local renderSteppedConnection = nil -- Shared connection variable
local lockedRenderConnection = nil -- Separate connection for locked platform
local switchEnabled = false -- NEW: Tracks if the switch functionality is enabled

-- UI positioning values
local speedControlsYPos = 100
local speedLabelWidth = 100
local buttonWidth = 30
local frameWidth = 200
local speedLabelXPos = (frameWidth - speedLabelWidth) / 2
local plusButtonXPos = speedLabelXPos - buttonWidth
local minusButtonXPos = speedLabelXPos + speedLabelWidth

-- Plus Button
local plusButton = Instance.new("TextButton")
plusButton.Parent = frame
plusButton.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
plusButton.Size = UDim2.new(0, buttonWidth, 0, 30)
plusButton.Position = UDim2.new(0, plusButtonXPos, 0, speedControlsYPos)
plusButton.Text = "+"
plusButton.TextScaled = true

-- Minus Button
local minusButton = Instance.new("TextButton")
minusButton.Parent = frame
minusButton.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
minusButton.Size = UDim2.new(0, buttonWidth, 0, 30)
minusButton.Position = UDim2.new(0, minusButtonXPos, 0, speedControlsYPos)
minusButton.Text = "-"
minusButton.TextScaled = true

-- Speed TextBox
local speedTextBox = Instance.new("TextBox")
speedTextBox.Parent = frame
speedTextBox.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
speedTextBox.Size = UDim2.new(0, speedLabelWidth, 0, 30)
speedTextBox.Position = UDim2.new(0, speedLabelXPos, 0, speedControlsYPos)
speedTextBox.Text = "Speed: 10"
speedTextBox.TextScaled = true
speedTextBox.ClearTextOnFocus = false
speedTextBox.PlaceholderText = "Enter speed"

-- Modified destroyPlatform function
local function destroyPlatform()
    -- Destroy both platforms and connections
    if movablePlatform then
        movablePlatform:Destroy()
        movablePlatform = nil
    end
    if lockedPlatform then
        lockedPlatform:Destroy()
        lockedPlatform = nil
    end
    isMovableActive = false
    isLockedActive = false

    -- Disconnect RenderStepped if it's active
    if renderSteppedConnection then
        renderSteppedConnection:Disconnect()
        renderSteppedConnection = nil
    end

    --Disconnect Locked Rendered stepped
    if lockedRenderConnection then
        lockedRenderConnection:Disconnect()
        lockedRenderConnection = nil
    end

    -- destroy gui
    if forwardGui then
        forwardGui:Destroy()
        forwardGui = nil
    end

    -- Reset Camera Subject
    local char = player.Character
    if char then
        local hrp = char:FindFirstChild("HumanoidRootPart")
        local humanoid = char:FindFirstChild("Humanoid")
        camera.CameraSubject = humanoid or hrp
    end
end

-- Function to spawn the MOVABLE platform (for ON button)
local function spawnMovablePlatform()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return false end

    -- Only destroy existing movable platform
    if movablePlatform then
        movablePlatform:Destroy()
        movablePlatform = nil
    end

    movablePlatform = Instance.new("Part")
    movablePlatform.Name = "MovablePlatform"
    movablePlatform.Size = Vector3.new(3, 1, 3)
    movablePlatform.BrickColor = BrickColor.Green()
    movablePlatform.Anchored = true
    movablePlatform.CanCollide = false
    movablePlatform.Transparency = 0
    movablePlatform.Parent = workspace

    movablePlatform.CFrame = CFrame.new(hrp.Position + Vector3.new(0, 2.5, 0))
    camera.CameraSubject = movablePlatform

    -- GUI controls for movement
    forwardGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
    forwardGui.ResetOnSpawn = false

    local forwardFrame = Instance.new("Frame", forwardGui)
    forwardFrame.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
    forwardFrame.Size = UDim2.new(0, 140, 0, 70)
    forwardFrame.Position = UDim2.new(0, 10, 1, -90)
    forwardFrame.BorderSizePixel = 0
    forwardFrame.Active = true
    forwardFrame.Draggable = false

    local forwardBtn = Instance.new("TextButton", forwardFrame)
    forwardBtn.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
    forwardBtn.Size = UDim2.new(0.38, 0, 0.5, 0); forwardBtn.Position = UDim2.new(0.31, 0, 0, 0)
    forwardBtn.Text = "Forward"; forwardBtn.TextScaled = true

    local backwardBtn = Instance.new("TextButton", forwardFrame)
    backwardBtn.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
    backwardBtn.Size = UDim2.new(0.38, 0, 0.5, 0); backwardBtn.Position = UDim2.new(0.31, 0, 0.5, 0)
    backwardBtn.Text = "Backward"; backwardBtn.TextScaled = true

    local leftBtn = Instance.new("TextButton", forwardFrame)
    leftBtn.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
    leftBtn.Size = UDim2.new(0.3, 0, 1, 0); leftBtn.Position = UDim2.new(0, 0, 0, 0)
    leftBtn.Text = "Left"; leftBtn.TextScaled = true

    local rightBtn = Instance.new("TextButton", forwardFrame)
    rightBtn.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
    rightBtn.Size = UDim2.new(0.3, 0, 1, 0); rightBtn.Position = UDim2.new(0.7, 0, 0, 0)
    rightBtn.Text = "Right"; rightBtn.TextScaled = true

    local targetRotation = 0

    -- Connect RenderStepped for MOVABLE platform updates
    renderSteppedConnection = runService.RenderStepped:Connect(function()
        -- Check if the connection should still be active for a movable platform
        if not movablePlatform or not isMovableActive then
            if renderSteppedConnection then
                 renderSteppedConnection:Disconnect()
                 renderSteppedConnection = nil
            end
            return
        end

        -- Update rotation based on camera
        local camCF = camera.CFrame
        targetRotation = math.atan2(camCF.RightVector.X, camCF.RightVector.Z)
        movablePlatform.CFrame = CFrame.new(movablePlatform.Position) * CFrame.Angles(0, targetRotation, 0)

        -- Update transparency based on distance
        local dist = (movablePlatform.Position - camera.CFrame.Position).Magnitude
        movablePlatform.Transparency = dist <= 10 and 1 or 0
    end)

    local function movePlatform(dir)
        if not isMovableActive or not movablePlatform then return end
        local dirVec = {
            forward = camera.CFrame.LookVector, backward = -camera.CFrame.LookVector,
            right = camera.CFrame.RightVector, left = -camera.CFrame.RightVector
        }
        local offset = dirVec[dir] * movementSpeed
        local targetCF = CFrame.new(movablePlatform.Position + offset) * CFrame.Angles(0, targetRotation, 0)

        if currentTween then currentTween:Cancel() end
        local tweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        currentTween = tweenService:Create(movablePlatform, tweenInfo, {CFrame = targetCF})
        currentTween:Play()
        camera.CameraSubject = movablePlatform
    end

    forwardBtn.MouseButton1Click:Connect(function() movePlatform("forward") end)
    backwardBtn.MouseButton1Click:Connect(function() movePlatform("backward") end)
    rightBtn.MouseButton1Click:Connect(function() movePlatform("right") end)
    leftBtn.MouseButton1Click:Connect(function() movePlatform("left") end)

    return true -- Return true on success
end

-- Modified spawnLockedPlatform function
local function spawnLockedPlatform()
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return false end

    -- Only destroy existing locked platform
    if lockedPlatform then
        lockedPlatform:Destroy()
        lockedPlatform = nil
    end

    lockedPlatform = Instance.new("Part")
    lockedPlatform.Name = "LockedPlatform"
    lockedPlatform.Size = Vector3.new(3, 1, 3)
    lockedPlatform.BrickColor = BrickColor.Red()
    lockedPlatform.Anchored = true
    lockedPlatform.CanCollide = false
    lockedPlatform.Transparency = 0
    lockedPlatform.Parent = workspace

    lockedPlatform.Position = hrp.Position + Vector3.new(0, 5, 0)

    -- Maintain separate render connection for locked platform
    lockedRenderConnection = runService.RenderStepped:Connect(function()
        if not lockedPlatform or not isLockedActive then
            if lockedRenderConnection then
                lockedRenderConnection:Disconnect()
                lockedRenderConnection = nil
            end
            return
        end
        local dist = (lockedPlatform.Position - camera.CFrame.Position).Magnitude
        lockedPlatform.Transparency = dist <= 10 and 1 or 0
    end)

    return true
end

-- Function to focus camera on locked platform
local function focusCameraOnLockedPlatform()
    if lockedPlatform and isLockedActive then
        camera.CameraSubject = lockedPlatform
    end
end

-- Button dimensions and spacing
local buttonWidth = 60
local buttonHeight = 30
local buttonSpacing = 10
local frameWidth = 200 -- Assuming frame width from the original script

-- Calculate starting position for buttons to center them horizontally
local totalButtonWidth = (buttonWidth * 4) + (buttonSpacing * 3)
local startX = (frameWidth - totalButtonWidth) / 2

-- Vertical position for the buttons (adjust as needed)
local startY = 20

-- On Button
local onButton = Instance.new("TextButton")
onButton.Parent = frame
onButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
onButton.Size = UDim2.new(0, buttonWidth, 0, buttonHeight)
onButton.Position = UDim2.new(0, startX, 0, startY)
onButton.Text = "On"
onButton.TextScaled = true

-- Lock Button
local lockButton = Instance.new("TextButton")
lockButton.Parent = frame
lockButton.BackgroundColor3 = Color3.fromRGB(0, 150, 255) -- Light Blue color for Lock
lockButton.Size = UDim2.new(0, buttonWidth, 0, buttonHeight)
lockButton.Position = UDim2.new(0, startX + buttonWidth + buttonSpacing, 0, startY)
lockButton.Text = "Lock"
lockButton.TextScaled = true

-- Off Button
local offButton = Instance.new("TextButton")
offButton.Parent = frame
offButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
offButton.Size = UDim2.new(0, buttonWidth, 0, buttonHeight)
offButton.Position = UDim2.new(0, startX + (buttonWidth * 2) + (buttonSpacing * 2), 0, startY)
offButton.Text = "Off"
offButton.TextScaled = true

-- Switch Button (NEW)
local switchButton = Instance.new("TextButton")
switchButton.Parent = frame
switchButton.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
switchButton.Size = UDim2.new(0, buttonWidth, 0, buttonHeight)
switchButton.Position = UDim2.new(0, startX + (buttonWidth * 3) + (buttonSpacing * 3), 0, startY)
switchButton.Text = "Switch"
switchButton.TextScaled = true

-- Create Destroy Button
local destroyButton = Instance.new("TextButton")
destroyButton.Parent = frame
destroyButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
destroyButton.Size = UDim2.new(0, 160, 0, 30)
destroyButton.Position = UDim2.new(0, 20, 0, 60)
destroyButton.Text = "Destroy"
destroyButton.TextScaled = true

-- Create Status Indicator
local statusLabel = Instance.new("TextLabel")
statusLabel.Parent = frame
statusLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
statusLabel.Size = UDim2.new(0, 200, 0, 30)
statusLabel.Position = UDim2.new(0, 0, 0, -30)
statusLabel.Text = "Status: Off"
statusLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
statusLabel.TextScaled = true

local function updateSpeedFromTextBox()
    local text = speedTextBox.Text
    local number = tonumber(string.match(text, "%d+"))
    if number and number >= 1 then
        movementSpeed = number
    end
    speedTextBox.Text = "Speed: " .. movementSpeed
end

speedTextBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        updateSpeedFromTextBox()
    end
end)

plusButton.MouseButton1Click:Connect(function()
    if isMovableActive then -- Only allow speed change for movable platform
        movementSpeed += 1
        speedTextBox.Text = "Speed: " .. movementSpeed
    end
end)

minusButton.MouseButton1Click:Connect(function()
    if isMovableActive then -- Only allow speed change for movable platform
        if movementSpeed > 1 then
            movementSpeed -= 1
            speedTextBox.Text = "Speed: " .. movementSpeed
        end
    end
end)

-- Modified Lock Button handler
lockButton.MouseButton1Click:Connect(function()
    if isLockedActive then
        -- Destroy only locked platform
        if lockedPlatform then
            lockedPlatform:Destroy()
            lockedPlatform = nil
        end
        isLockedActive = false
        statusLabel.Text = "Status: " .. (isMovableActive and "On" or "Off")
        if lockedRenderConnection then
                lockedRenderConnection:Disconnect()
                lockedRenderConnection = nil
        end
    else
        -- Spawn locked platform without affecting movable
        local success = spawnLockedPlatform()
        if success then
            isLockedActive = true
            statusLabel.Text = "Status: " .. (isMovableActive and "On + Locked" or "Locked")
            if switchEnabled then
                focusCameraOnLockedPlatform()
            end
        end
    end
end)

-- Modified On Button handler
onButton.MouseButton1Click:Connect(function()
    if not isMovableActive then
        local success = spawnMovablePlatform()
        if success then
            isMovableActive = true
            statusLabel.Text = "Status: " .. (isLockedActive and "On + Locked" or "On")
            statusLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
        end
    end
end)

-- Modified Off Button handler
offButton.MouseButton1Click:Connect(function()
    if isMovableActive then
        -- Destroy only movable platform
        if movablePlatform then
            movablePlatform:Destroy()
            movablePlatform = nil
        end
        isMovableActive = false
        statusLabel.Text = "Status: " .. (isLockedActive and "Locked" or "Off")
        statusLabel.TextColor3 = Color3.fromRGB(255, 0, 0)

         -- Reset Camera Subject to the Humanoid
        local char = player.Character
        if char then
            local hrp = char:FindFirstChild("HumanoidRootPart")
            local humanoid = char:FindFirstChild("Humanoid")
            camera.CameraSubject = humanoid or hrp
        end

        -- destroy gui
        if forwardGui then
            forwardGui:Destroy()
            forwardGui = nil
        end
    end
end)

-- Switch Button Logic (NEW)
switchButton.MouseButton1Click:Connect(function()
    switchEnabled = not switchEnabled -- Toggle the switch state

    if switchEnabled then
        switchButton.Text = "Switch (On)" -- Show the switch is on
        switchButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0) --Turn button green
        if lockedPlatform and isLockedActive then
            focusCameraOnLockedPlatform() -- Focus camera if already locked
        end
    else
        switchButton.Text = "Switch" -- Show the switch is off
        switchButton.BackgroundColor3 = Color3.fromRGB(200, 200, 200) --turn button grey
        -- Reset the camera subject when switch is turned off
         local char = player.Character
        if char then
            local hrp = char:FindFirstChild("HumanoidRootPart")
            local humanoid = char:FindFirstChild("Humanoid")
            camera.CameraSubject = humanoid or hrp
        end
    end
end)

destroyButton.MouseButton1Click:Connect(function()
    destroyPlatform() -- This destroys either platform type
    screenGui:Destroy()
end)

-- plusButton.MouseButton1Click:Connect(function()
--     if isMovableActive then -- Only allow speed change for movable platform
--         movementSpeed += 1
--         speedTextBox.Text = "Speed: " .. movementSpeed
--     end
-- end)

-- minusButton.MouseButton1Click:Connect(function()
--     if isMovableActive then -- Only allow speed change for movable platform
--         if movementSpeed > 1 then
--             movementSpeed -= 1
--             speedTextBox.Text = "Speed: " .. movementSpeed
--         end
--     end
-- end)

plusButton.MouseButton1Click:Connect(function()
    if isMovableActive then
        movementSpeed = movementSpeed + 1
        speedTextBox.Text = "Speed: " .. tostring(movementSpeed)
    end
end)

minusButton.MouseButton1Click:Connect(function()
    if isMovableActive then
        movementSpeed = math.max(1, movementSpeed - 1)
        speedTextBox.Text = "Speed: " .. tostring(movementSpeed)
    end
end)
